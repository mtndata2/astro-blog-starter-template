---
import "../styles/global.css";

// Helper to get base URL in SSR
function getBaseUrl(Astro) {
  if (Astro.site) return Astro.site;
  if (Astro.request) return new URL(Astro.request.url).origin;
  return "https://astro-blog-starter-template.mtndatasales.workers.dev";
}

let history = [];
let latest = {};
try {
  const baseUrl = getBaseUrl(Astro);

  // 1. Get history
  const resHistory = await fetch(`${baseUrl}/api/usd-ngn-history`);
  if (resHistory.ok) {
    history = await resHistory.json();
  }

  // 2. Get latest
  const resLatest = await fetch(`${baseUrl}/api/latest-rates`);
  if (resLatest.ok) {
    const allRates = await resLatest.json();
    latest = allRates.USD_NGN ?? {};
  }

  // 3. Patch last history day if history is present
  if (history.length) {
    const last = history[history.length - 1];
    // Only patch if latest is not empty and buy/sell are missing/null
    if (latest && (last.buy == null || last.sell == null)) {
      history[history.length - 1] = { ...last, ...latest };
    }
  }

  // 4. If no history, create an entry using latest (with today's date)
  if (!history.length && latest && (latest.buy || latest.sell)) {
    const todayIso = new Date().toISOString().slice(0, 10);
    history = [{ date: todayIso, ...latest }];
  }

} catch (e) {
  history = [];
  latest = {};
}

// Calculate stats
let buyHigh = Math.max(...history.map(h => h.buy ?? 0));
let buyLow = Math.min(...history.map(h => h.buy ?? Infinity));
let sellHigh = Math.max(...history.map(h => h.sell ?? 0));
let sellLow = Math.min(...history.map(h => h.sell ?? Infinity));
let last7 = history.slice(-7).reverse();

const today = history.at(-1) || {};
const yesterday = history.at(-2) || {};
const todayDate = today.date
  ? (today.date.length === 8
      ? new Date(today.date.replace(/^(\d{4})(\d{2})(\d{2})$/, '$1-$2-$3'))
      : new Date(today.date))
  : new Date();

// **KEY FIX:** Always show latest if available, fallback to today's history
const buyRate = latest.buy ?? today.buy ?? 'N/A';
const sellRate = latest.sell ?? today.sell ?? 'N/A';
const buyRateYesterday = yesterday.buy ?? null;

let percentChange = '';
if (buyRateYesterday && typeof buyRate === 'number') {
  const pct = ((buyRate - buyRateYesterday) / buyRateYesterday) * 100;
  percentChange = (pct > 0 ? 'â†‘' : 'â†“') + ' ' + Math.abs(pct).toFixed(2) + '%';
}

function formatDate(dt) {
  return dt.toLocaleDateString('en-GB', { day: 'numeric', month: 'long', year: 'numeric' });
}
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Dollar (USD) to Naira Black Market Rate - Last 30 Days</title>
    <meta name="description" content="See the latest USD to NGN black market exchange rates, graph, 30-day history, 7-day table, and all time high/low." />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body>
    <section class="currency-page">
      <div class="currency-header">
        <span class="currency-flag">ðŸ‡ºðŸ‡¸</span>
        <h1>USD to NGN Black Market Rate</h1>
      </div>

      <!-- Summary Box -->
      <div class="summary-box">
        <b>
          As of {formatDate(todayDate)}, the exchange rate for 1 US Dollar to Nigerian Naira is <span style="color:#166a39;">â‚¦{buyRate}</span>.
          Compared to yesterday, this represents a
          <span style={percentChange.startsWith('â†“') ? 'color:red;' : 'color:green;'}>{percentChange || 'â€”'}</span> in value.
        </b>
        <div style="margin-top:0.8em">
          If you're planning to buy <b>1 Dollar</b> at street value, the current rate would cost you approximately <span style="color:#166a39;"><b>â‚¦{buyRate}</b></span>.
        </div>
        <div style="margin-top:0.5em">
          Do you have 1 Dollar to sell now? Here is the rate to sell: <span style="color:#166a39;"><b>â‚¦{sellRate}</b></span> for USD.
        </div>
      </div>

      <!-- Chart placeholder -->
      <div id="chart-container" style="margin-bottom: 2em;">
        <em style="color:#8ba390;">[Chart coming soon]</em>
      </div>

      <!-- High/Low Stats -->
      <div class="stats-box">
        <div><b>30d High (Buy):</b> â‚¦{buyHigh}</div>
        <div><b>30d Low (Buy):</b> â‚¦{buyLow}</div>
        <div><b>30d High (Sell):</b> â‚¦{sellHigh}</div>
        <div><b>30d Low (Sell):</b> â‚¦{sellLow}</div>
      </div>

      <!-- Last 7 Days Table -->
      <table class="history-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Buy</th>
            <th>Sell</th>
          </tr>
        </thead>
        <tbody>
          {last7.map(day => (
            <tr>
              <td>
                {day.date?.length === 8
                  ? day.date.replace(/^(\d{4})(\d{2})(\d{2})$/, '$3/$2/$1')
                  : day.date}
              </td>
              <td>â‚¦{day.buy ?? "N/A"}</td>
              <td>â‚¦{day.sell ?? "N/A"}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </section>
  </body>
</html>
